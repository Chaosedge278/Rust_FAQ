{
  "name": "Rust FAQ",
  "tagline": "FAQ Rust construite sur [et avec les outils de] developpez.com.",
  "body": "# Langage\r\n\r\n## Questions générales\r\n\r\n### Comment déclarer une variable ?\r\n\r\nLa déclaration d'une variable en Rust se fait par le biais du mot-clé `let`, permettant ainsi de différencier une assignation d'une expression.\r\n\r\nVous pouvez bien entendu déclarer et initialiser plusieurs variables en même temps de cette manière :\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let (foo, bar, baz) = (117, 42, \"Hello world!\");\r\n}\r\n```\r\n\r\nOu effectuer une déclaration multiligne :\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo = 117;\r\n    let bar = 42;\r\n    let baz = \"Hello world!\";\r\n}\r\n```\r\n\r\nVoir aussi : [Rust possède-t-il un typage dynamique ?](#rust-possède-t-il-un-typage-dynamique)\r\n\r\n### Comment assigner un objet par référence ?\r\n\r\nIl existe deux façons de faire :\r\n\r\n\r\n1. Préciser par le biais du caractère &. (C-style)\r\n2. En utilisant le mot-clé `ref` comme ceci :\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo = 117i32;\r\n    let ref bar = foo;\r\n    let baz = &foo; //idem\r\n}\r\n```\r\n\r\n### Rust possède-t-il un typage dynamique ?\r\n\r\nNon.\r\n\r\nBien qu'il en donne l'air grâce à une syntaxe très aérée, Rust dispose d'un typage statique mais « optionnel » pour le développeur si il désire faire abstraction des types, mais il perdra, en toute logique, l'avantage de choisir la quantité de mémoire que sa ressource consommera.\r\n\r\nVous ne pouvez, par exemple, pas faire ceci :\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let mut foo = 1;\r\n    foo = \" Hello world !\";\r\n}\r\n```\r\n\r\nLe type ayant été fixé par la première donnée, il n'est plus possible de changer en cours de route.\r\n\r\nVoir aussi : [Comment typer ses données/variables](#comment-typer-ses-donnéesvariables) ?\r\n\r\n### Comment typer ses données/variables ?\r\n\r\nPour les types primitifs, il existe deux manières de typer une variable :\r\n\r\n```rust\r\nfn main() {\r\n    let foo: i32 = 117;\r\n}\r\n```\r\n\r\nOu :\r\n\r\n```rust\r\nfn main() {\r\n    let bar = 117i32;\r\n}\r\n```\r\n\r\n### Quelle est la différence entre &str et String ?\r\n\r\n`&str` est un type non mutable représentant une chaîne de caractères tandis que `String` est un wrapper mutable au-dessus de ce dernier.\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo: &str = \"Hello world!\"; // ça fonctionne\r\n    let bar: String = foo; // erreur\r\n    let baz: String = foo.to_string(); // Ok !\r\n    let baz: String = foo.to_owned(); // Ok ! (équivalent avec la ligne du dessus)\r\n}\r\n```\r\n\r\n### Comment créer une chaîne de caractères ?\r\n\r\nLa question pourrait paraître évidente dans d'autres langages, toutefois, après avoir écrit quelque chose de ce style :\r\n\r\n```rust\r\nfn main() {\r\n    let foo: String = \"Hello world!\";\r\n}\r\n```\r\n\r\nLe compilateur vous a renvoyé cette erreur :\r\n\r\n```texinfo\r\n  |>\r\n4 |>    let foo: String = \"Hello world!\";\r\n  |>                      ^^^^^^^^^^^^^^ expected struct `std::string::String`, found &-ptr\r\n```\r\n\r\nIl se trouve que la structure `String` est un wrapper.\r\n\r\nVous vous retrouvez donc à typer votre variable pour accueillir une instance de la structure `String` alors que vous créez une chaîne de caractères primitive.\r\n\r\nPour remédier au problème (si vous souhaitez malgré tout utiliser le wrapper), vous pouvez convertir une chaîne de caractères de type `&str` grâce à la fonction `String::from()` :\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo: String = String::from(\"Hello world!\");\r\n    // ou\r\n    let foo: &str = \"Hello world!\";\r\n}\r\n```\r\n\r\nOu encore avec les méthodes `to_owned` et `to_string` (à préférer à la méthode `from` qui est un peu plus générale) :\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo = \"Hello world!\".to_owned();\r\n    let foo = \"Hello world!\".to_string();\r\n}\r\n```\r\n\r\n### Quelle version de Rust est recommandée ?\r\n\r\nActuellement***2 novembre 2016***, la version stable la plus récente est la **1.12.1**.\r\n\r\nMais vous pouvez toutefois utiliser une version un peu plus vieille.\r\n\r\nPour cette Q/R, la version de Rust sur mon poste était la **1.9.0**.\r\n\r\nVoir aussi : [Page officielle du langage Rust](https://www.rust-lang.org/en-US/ \"Ouvrir un nouvel onglet\")\r\n\r\n### Rust est-il orienté objet ?\r\n\r\nRust hérite des structures du *C*, elles n'incluent donc pas l'encapsulation des données comme nous pourrions l'imaginer avec une classe.\r\n\r\nIl dispose d'un aspect de la POO, de prime abord, assez primitif ; Rust permet toutefois de bénéficier du polymorphisme grâce aux « traits » qui pourraient être comparées aux interfaces Java/C#.\r\n\r\nCependant, le langage ne supporte pas l'héritage multiple (ni l'héritage simple) entre les structures : comme il serait possible de le faire avec des classes, bien qu'il soit possible de le faire avec des traits.\r\n\r\nPar conséquent, Rust est donc orienté objet puisqu'il possède plusieurs parties de ce paradigme mais n'est pas un langage *pur* objet.\r\n\r\nVoir aussi : [Qu'est-ce qu'un « trait » ?](#quest-ce-quun-trait)\r\n\r\n### Qu'est-ce qu'un « trait » ?\r\n\r\nUn trait pourrait être comparé aux interfaces que l'on peut retrouver dans la plupart des langages orientés objet. (e.g. Java, C#).\r\n\r\nLes traits vous permettent de déclarer des fonctions abstraites/virtuelles pour ensuite les implémenter au sein d'une structure grâce au mot-clé `impl` comme ceci :\r\n\r\n```rust\r\ntrait Greeter {\r\n    fn greetings(&self);\r\n}\r\n\r\nstruct Person;\r\n\r\nimpl Greeter for Person {\r\n    fn greetings(&self) {\r\n        println!(\"Hello, my friends!\");\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let person = Person;\r\n    person.greetings();\r\n}\r\n```\r\n\r\nPour aller au plus simple, un trait vous permet d'écrire un ensemble de fonctions qu'un objet est obligé d'implémenter lorsqu'il hérite de ce trait.\r\n\r\n### Rust supporte-t-il la surchage des fonctions ?\r\n\r\nRust ne supporte pas la surcharge des fonctions.\r\n\r\nLe langage repose sur le « Builder Pattern » qui consiste à concevoir des « fabriques/factories » chargées de générer l'objet désiré.\r\n\r\nVous pouvez retrouver quelques explications à propos de ce design pattern [ici](https://doc.rust-lang.org/book/method-syntax.html#builder-pattern) ou encore [ici](https://fr.wikipedia.org/wiki/Monteur_(patron_de_conception)#Exemple \"Ouvrir un nouvel onglet\").\r\n\r\nVoir aussi : [Comment déclarer des paramètres optionnels](#comment-déclarer-des-paramètres-optionnels) ?\r\n\r\n### Comment déclarer des paramètres optionnels ?\r\n\r\nIl n'est pas possible de déclarer des paramètres optionnels avec Rust dans sa version actuelle.\r\n\r\nToutefois, il est toujours possible d'user de macros pour capturer différentes expressions et ainsi adapter votre code en fonction de la situation.\r\n\r\nLe langage repose sur le « Builder Pattern » qui consiste à concevoir des « fabriques/factories » chargées de générer l'objet désiré.\r\n\r\nVous pouvez retrouver quelques explications à propos de ce design pattern [ici](https://doc.rust-lang.org/book/method-syntax.html#builder-pattern) ou encore [ici](https://fr.wikipedia.org/wiki/Monteur_(patron_de_conception) \"Ouvrir un nouvel onglet\").\r\n\r\nVoir aussi : [Comment utiliser une macro ?](#comment-utiliser-une-macro)\r\n\r\n### Comment créer un tableau ?\r\n\r\nUn tableau dans sa forme la plus primitive se déclare comme ceci :\r\n\r\n```rust\r\nlet foo: [i32; 10] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n```\r\n\r\n**Note **: la taille du tableau doit être explicite, sous peine de recevoir une erreur de la part du compilateur.\r\n\r\n### À quoi sert le mot-clé super ?\r\n\r\nContrairement à ce que l'on pourrait croire, le mot-clé `super` ne représente pas une référence vers l'instance courante d'une classe mère, mais représente seulement le « scope » supérieur (dans un module).\r\n\r\nExemple :\r\n\r\n```rust\r\nmod mon_module {\r\n    pub fn ma_fonction() {\r\n        println!(\"Scope supérieur\");\r\n    }\r\n\r\n    pub mod fils {\r\n        pub fn fonction_enfant() {\r\n            super::ma_fonction();\r\n        }\r\n    }\r\n\r\n    pub mod fille {\r\n        pub fn fonction_enfant() {\r\n            super::ma_fonction();\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    mon_module::fils::fonction_enfant();\r\n    mon_module::fille::fonction_enfant();\r\n}\r\n```\r\n\r\n### A quoi sert le mot-clé self ?\r\n\r\nLe mot-clé `self` renvoie à une copie (ou la référence (`&self`)) de l'instance courante.\r\n\r\nIl est souvent rencontré :\r\n\r\n* lorsqu'une fonction virtuelle/abstraite est implémentée au sein d'une structure,\r\n* lorsque le développeur doit utiliser une fonction dans le module courant, \r\n* …\r\n\r\nExemple :\r\n\r\n```rust\r\ntrait My_Trait {\r\n    fn my_func(&self);\r\n}\r\n\r\nmod My_Mod {\r\n    fn foo() {\r\n        self::bar();\r\n    }\r\n    \r\n    fn bar() {\r\n    }\r\n}\r\n```\r\n\r\nIl sert aussi à désigner le module courant lors d'un import. Par exemple :\r\n\r\n```rust\r\nuse std::io::{self, File};\r\n\r\n// maintenant on peut utiliser File mais aussi io !\r\n```\r\n\r\n### A quoi sert le mot-clé use ?\r\n\r\nLe mot-clé `use` permet de raccourcir le « chemin » des dépendences du programme, vous évitant ainsi d'expliciter les dépendences de chacune de vos ressources.\r\n\r\nExemple :\r\n\r\n```rust\r\nextern crate mon_package ;\r\n\r\nuse mon_package::mon_module::ma_fonction ;\r\n\r\nfn main() {\r\n    ma_fonction() ;\r\n}\r\n```\r\n\r\nAutrement dit, toute structure composée de différentes ressources peut être exploitée par le mot-clé `use`.\r\n\r\nExemple :\r\n\r\n```rust\r\nenum MonEnum {\r\n    Arg1,\r\n    Arg2,\r\n}\r\n\r\nfn main() {\r\n    use MonEnum::{Arg1};\r\n    let instance = Arg1; //plus la peine d'expliciter d'où provient l'instance Arg1 comme ceci:\r\n    // let instance = MonEnum::Arg1;\r\n}\r\n```\r\n\r\nIl permet aussi de réexporter des modules vers le scope supérieur. Prenons par un exemple un project possédant cette hiérarchie :\r\n\r\n```text\r\nsrc\r\n ├─── fichier.rs\r\n ├─── video\r\n |      ├──── video.rs\r\n |      ├──── mod.rs\r\n |\r\n ├─── audio\r\n        ├──── audio.rs\r\n        ├──── mod.rs\r\n```\r\n\r\nPour pouvoir accéder aux items présents dans `audio.rs` et `video.rs`, vous allez devoir les rendre visibles dans les niveaux supérieurs en les réexportant comme ceci :\r\n\r\n```rust\r\n// dans video/mod.rs\r\npub use self::video::{Video, une_fonction};\r\n\r\nmod video;\r\n\r\n// dans audio/mod.rs\r\npub use self::audio::{Audio, une_autre_fonction};\r\n\r\nmod audio;\r\n```\r\n\r\nDans `fichier.rs`, vous pourrez désormais faire :\r\n\r\n```rust\r\nuse Audio;\r\nuse Video;\r\n```\r\n\r\n### A quoi sert le mot-clé pub ?\r\n\r\nLe mot-clé `pub` peut être utilisé dans *trois* contextes différents :\r\n\r\n1. Au sein [et sur] des modules ;\r\n2. Au sein [et sur] des traits ;\r\n3. Au sein [et sur] des structures.\r\n\r\nDans un premier temps, qu'il soit utilisé sur des `mod`ules, `trait`s, ou `struct`ures, il aura toujours la même fonction : rendre public l'objet concerné.\r\n\r\nExemple :\r\n\r\n```text\r\n├── Cargo.lock\r\n├── Cargo.toml\r\n├── src\r\n│   ├── lib.rs\r\n│   └── main.rs\r\n└── target\r\n    └── debug\r\n        ├── build\r\n        ├── deps\r\n        ├── examples\r\n        ├── libmon_projet.rlib\r\n        ├── mon_projet\r\n        └── native\r\n```\r\n\r\n```rust\r\npub mod ma_lib { //la module représentant ma bibliothèque\r\n    pub mod mon_module { // un module lambda\r\n        pub fn ma_fonction() { //ma fonction\r\n            println!(\"Hi there !\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```rust\r\nextern crate mon_projet;\r\n\r\nuse mon_projet::ma_lib::mon_module::ma_fonction;\r\n\r\nfn main() {\r\n    ma_fonction();\r\n}\r\n```\r\n\r\nRenvoie :\r\n\r\n```text\r\nHi there !\r\n```\r\n\r\n« mon_projet » est le nom porté par votre projet dans le manifest Cargo.toml.\r\n\r\nPour cet exemple, voici le manifest rédigé :\r\n\r\n```toml\r\n[package]\r\nname = \"mon_projet\"\r\nversion = \"0.1.0\"\r\nauthors = [\"Songbird0 <chaacygg@gmail.com>\"]\r\n\r\n[dependencies]\r\n```\r\n\r\n**Comment faire une méthode statique ?**\r\n\r\nTout dépend de la présence de `self`/`&self`/`&mut self` en premier argument. Exemple :\r\n\r\n```rust\r\nstruct A;\r\n\r\nimpl A {\r\n    fn foo() { // ceci est une méthode statique\r\n    }\r\n\r\n    fn foo1(arg: i32) { // ceci est une méthode statique\r\n    }\r\n    \r\n    fn foo2(&self) { // ceci n'est pas une méthode statique\r\n    }\r\n    \r\n    fn foo3(self) { // ceci n'est pas une méthode statique non plus\r\n    }\r\n    \r\n    fn foo4(&self, arg: i32) { // ceci n'est pas non plus une méthode statique\r\n    }\r\n}\r\n```\r\n\r\n### A quoi servent les mot-clés extern crate ?\r\n\r\nLes mot-clés `extern crate` permettent d'importer un paquet entier de modules dans le fichier courant, aussi appelé crate.\r\n\r\nLe principe est simple, il vous suffit seulement de créer en premier lieu un projet en mode « bibliothèque » pour réunir tous les modules que vous créerez, de créer un fichier qui accueillera le point d'entrée de votre programme, puis d'importer votre paquet.\r\n\r\nBien entendu, si vous souhaitez importer un paquet qui n'est pas de vous, il vous faudra l'inscrire dans votre manifest.\r\n\r\nVoir aussi :\r\n\r\nPour voir un exemple de création de paquet, vous pouvez vous rendre à la Q/R : « [A quoi sert le mot-clé pub ?](#LII-A-16 \"A quoi sert le mot-clé pub ?\") »\r\n\r\n[Comment installer de nouvelles bibliothèques ?](#comment-installer-de-nouvelles-bibliothèques)\r\n\r\n### A quoi sert le mot-clé mod ?\r\n\r\nLe mot-clé `mod` vous permet d'importer ou de déclarer un module. Il est important de noter que les fichiers sont considérés comme des modules. Exemple :\r\n\r\n```rust\r\nmod a {\r\n    fn foo() {}\r\n}\r\n\r\nmod nom_du_fichier; // importera le fichier \"nom_du_fichier.rs\"\r\n```\r\n\r\nVoir aussi :\r\n\r\n[A quoi sert un module ?](#a-quoi-sert-un-module)\r\n\r\n### A quoi sert un module ?\r\n\r\nIl vous permet de réunir plusieurs objets (`struct`ures, `trait`s, fonctions, d'autres `mod`ules…) dans un même fichier puis de les réutiliser à plusieurs endroits dans votre programme.\r\n\r\nVoir aussi :\r\n\r\n\r\n*  [A quoi sert le mot-clé pub ?](#a-quoi-sert-le-mot-clé-pub) \r\n*  [A quoi servent les mot-clés extern crate ?](#a-quoi-servent-les-mot-clés-extern-crate) \r\n\r\n### Comment créer un module ?\r\n\r\nVoici comment créer un `mod`ule :\r\n\r\n```rust\r\nmod A {\r\n    fn votre_fonction() {}\r\n    fn une_autre_fonction() {}\r\n\r\n    mod B {\r\n        struct C;\r\n        trait D {}\r\n    }\r\n}\r\n```\r\n\r\n### A quoi sert le mot-clé type ?\r\n\r\nLe mot-clé `type` permet de créer des *alias* et ainsi réduire la taille des types personnalisés (ou primitifs).\r\n\r\nVoici un exemple :\r\n\r\n```rust\r\nstruct VeryLongTypeName;\r\n\r\nimpl VeryLongTypeName {\r\n    pub fn new() -> VeryLongTypeName {\r\n        println!(\"In new function\");\r\n        return VeryLongTypeName;\r\n    }\r\n}\r\n\r\ntype ShortName = VeryLongTypeName;\r\n\r\nfn main() {\r\n    let foo = ShortName::new();\r\n}\r\n```\r\n\r\nLiens :\r\n\r\nPour exécuter l'exemple de la Q/R, vous pouvez vous rendre [ici](https://is.gd/hPONv0 \"Rust Playground\").\r\n\r\nRetrouvez des explications [ici](http://stackoverflow.com/questions/29447920/what-is-the-rust-type-keyword \"Post StackOverflow\").\r\n\r\n[Explications de la documentation officielle](http://rustbyexample.com/cast/alias.html \"Rust by Example\").\r\n\r\n### A quoi sert le mot-clé loop ?\r\n\r\nLe mot-clé `loop` est un sucre syntaxique qui permet de remplacer le fameux :\r\n\r\n```rust\r\nwhile(true) {\r\n\r\n}\r\n\r\n// ou\r\n\r\nfor(;;) {\r\n\r\n}\r\n```\r\n\r\nPréférez donc cette syntaxe :\r\n\r\n```rust\r\nloop {\r\n\r\n}\r\n```\r\n\r\nLiens :\r\n\r\n[Documentation officielle](https://doc.rust-lang.org/book/loops.html#loop \"Ancre vers le mot-clé loop\").\r\n\r\n### A quoi sert le mot-clé where ?\r\n\r\nLe mot-clé `where` permet de filtrer les objets passés en paramètres dans une fonction génériques, par exemple :\r\n\r\n```rust\r\ntrait Soldier{}\r\ntrait Citizen{}\r\n\r\nstruct A;\r\nstruct B;\r\n\r\nimpl Soldier for A {}\r\n\r\nfn foo<T>(test: T) -> T\r\nwhere T: Soldier {\r\n    return test;\r\n}\r\n\r\nfn main() {\r\n    let soldier: A = A;\r\n    let citizen: B = B;\r\n    foo(soldier);\r\n    foo(citizen); //error: the trait bound `B: Soldier` is not satisfied\r\n}\r\n```\r\n\r\n### A quoi sert le mot-clé unsafe ?\r\n\r\nLe mot-clé `unsafe` permet, comme son nom l'indique, de casser certaines règles natives de Rust pour effectuer des opérations « à risque ».\r\n\r\nEn pratique, le mot-clé `unsafe` permet une manipulation de la mémoire plus approfondie, plus directe, mais aussi plus compliquée, puisque le langage n'applique pas certaines règes.\r\n\r\nPour faire simple : utilisez `unsafe` aussi peu que possible.\r\n\r\nExemple d'utilisation d'`unsafe` :\r\n\r\n```rust\r\nlet x: i32 = &0;\r\nlet ptr = x as *const i32;\r\nunsafe { *ptr; } // on tente d'accéder à l'élément pointé par le pointeur, ce qui est hautement \"unsafe\"\r\n```\r\n\r\nVoir aussi :\r\n\r\n[Quelles sont les règles non-appliquées dans ces contextes ?](#quelles-sont-les-règles-non-appliquées-dans-ces-contextes)\r\n\r\n[Quels comportements sont considérés « non-sûrs » par Rust ?](#quels-comportements-sont-considérés-non-sûrs-par-rust)\r\n\r\n### Quelles sont les règles non-appliquées dans ces contextes ?\r\n\r\nTrois règles, et seulement trois, sont brisées dans les blocs (et fonctions) `unsafe`:\r\n\r\n1. L'accès et la modification d'une variable globale (statique) mutable sont autorisés ;\r\n2. Il est possible de déréférencer un pointeur (non-nul, donc) ;\r\n3. Il est possible de faire à une fonction non-sûre.\r\n\r\n### Quels comportements sont considérés « non-sûrs » par Rust ?\r\n\r\nPour en retrouver une liste exhaustive, rendez-vous à la [section dédiée](https://doc.rust-lang.org/book/unsafe.html#what-does-safe-mean \"Ouvrir un nouvel onglet\").\r\n\r\n### A quoi sert le mot-clé fn ?\r\n\r\nEn rust, pour déclarer une fonction, il faut utiliser le mot-clé `fn` :\r\n\r\n```rust\r\nfn ma_fonction() {\r\n\r\n}\r\n```\r\n\r\n### A quoi sert le mot-clé match ?\r\n\r\nLe mot-clé `match` nous permet d'implémenter le *pattern* *matching*.\r\n\r\nAinsi, il est possible de comparer une entrée à plusieurs tokens constants et agir en conséquence. Le pattern matching est considéré comme un test *exhaustif*, car, quoi qu'il arrive, il fera en sorte de couvrir tous les cas de figure qu'on lui propose.\r\n\r\nExemple :\r\n\r\n```rust\r\nlet foo: i32 = 117;\r\n\r\nmatch foo {\r\n    117 => println!(\"foo's value equals 117 !\"),\r\n    _ => println!(\"You know nothing, John.\"), // s'efforcera de trouver une réponse\r\n}\r\n```\r\n\r\nJusqu'ici, il semblerait que le mot-clé `match` ne soit pas capable de faire preuve de plus de souplesse qu'un `switch`, ce qui est bien entendu le contraire ! Vous pouvez par-exemple matcher sur un ensemble de valeur :\r\n\r\n```rust\r\nlet foo: i32 = 117;\r\n\r\nmatch foo {\r\n    100...120 => println!(\"foo's value equals est entre 100 et 120 !\"),\r\n    _ => println!(\"You know nothing, John.\"), // s'efforcera de trouver une réponse\r\n}\r\n```\r\n\r\nLe pattern matching est très puissant, n'hésitez pas à en user et en abuser !\r\n\r\nVoir aussi :\r\n\r\nVous pouvez exécuter l'exemple [ici](https://is.gd/otk1eC).\r\n\r\nVous pouvez retrouver [une source](https://en.wikipedia.org/wiki/Pattern_matching) abordant le pattern matching. (avec plusieurs exemples)\r\n\r\n[Partie de la documentation officielle abordant l'implémentation du pattern matching](https://doc.rust-lang.org/book/match.html).\r\n\r\n### A quoi sert le mot-clé ref ?\r\n\r\nLe mot-clé `ref` est une alternative au caractère spécial `&` pour expliciter le renvoie d'une référence d'un objet :\r\n\r\n```rust\r\nstruct A;\r\n\r\nfn main() {\r\n    let foo: A = A ;\r\n    let bar: &A = &foo ; // ou let ref bar = foo ;\r\n}\r\n```\r\n\r\n### A quoi sert le mot-clé mut ?\r\n\r\nLe mot-clé `mut` permet de rendre l'une de vos variable muables lors de sa déclaration.\r\n\r\n```rust\r\nlet mut foo: i32 = 0 ;\r\nlet bar: i32 = 1 ;\r\nfoo = 1 ;\r\nbar = 2 ; //erreur\r\n```\r\n\r\n### Une erreur survient lorsque que je modifie le contenu de ma variable ! Que faire ?\r\n\r\nIl se peut que vous ayez omis la particularité de Rust : tout est immuable par défaut.\r\n\r\nPour permettre à une variable de modifier son contenu, il vous faudra utiliser le mot-clé `mut`.\r\n\r\nVoir aussi : [A quoi sert le mot-clé mut ?](#a-quoi-sert-le-mot-clé-mut)\r\n\r\n### Qu'est-ce qu'une macro ?\r\n\r\nUne macro est ce que l'on peut appeler vulgairement : une fonction très puissante.\r\n\r\nGrâce aux macros, nous pouvons capturer *plusieurs* groupes *d'expressions* et ainsi écrire les instructions désirées selon *chaque* cas.\r\n\r\nPour grossir un peu le trait : les macros sont une extension du compilateur de Rust. Elles sont interprétées au moment de la compilation, pas pendant l'exécution de votre programme.\r\n\r\nVoir aussi : [Comment utiliser une macro ?](#comment-utiliser-une-macro)\r\n\r\n### Comment utiliser une macro ?\r\n\r\nPour utiliser une macro, il faut d'abord la déclarer en utilisant le mot-clé `macro_rules!`.\r\n\r\n```rust\r\nmacro_rules! foo\r\n{\r\n    () => ();\r\n}\r\n```\r\n\r\nToutes les macros (y compris celle présentée ici) respectent une règle très importante : elles doivent toutes capturer au moins une expression pour être valide et compilées. (en l'occurrence, la regex `() => () ;`)\r\n\r\nC'est donc cela, l'une des différences majeures entre une fonction/procédure et une macro : cette dernière est capable de capturer des expressions rationnelles, conserver en mémoire ce que désire le développeur, puis de les ré-utiliser dans le corps de l'une d'entre-elles.\r\n\r\nCes « super » fonctions demandent donc quelques notions liées aux expressions rationnelles pour vous permettre d'apprécier pleinement ce puissant mécanisme.\r\n\r\nVoici un exemple très basique de macro :\r\n\r\n```rust\r\n/// **Attention**:\r\n/// \r\n/// Cette macro n'utilise qu'un seul type de spécificateur, mais il en existe beaucoup d'autres.\r\nmacro_rules! foo\r\n{\r\n    ($your_name:expr, $your_last_name:expr, $carriage_return: expr) =>\r\n    {\r\n        if $carriage_return == true\r\n        {\r\n            println!(\"My name's {} {}.\", $your_name, $your_last_name); \r\n        }\r\n        else { print!(\"My name's {} {}.\", $your_name, $your_last_name); }\r\n    };\r\n    \r\n    ($your_name:expr, $your_last_name:expr) =>\r\n    {\r\n        foo!($your_name, $your_last_name, false);\r\n    };\r\n    \r\n    ($your_name:expr) =>\r\n    {\r\n        foo!($your_name, \"\", false);\r\n    };\r\n}\r\n\r\nfn main() {\r\n    foo!(\"Song\", \"Bird\", true);\r\n    foo!(\"Song\", \"Bird\"); // pas de retour à la ligne\r\n    foo!(\"Song\"); // là non plus\r\n}\r\n```\r\n\r\nVous aurez certainement remarqué que les paramètres passés sont assez spéciaux ; Au lieu d'avoir le nom de leur type après les deux points (« : »), il est écrit `expr`.\r\n\r\nC'est ce que l'on appelle un « spécificateur » .\r\n\r\nLiens :\r\n\r\n[Visionner le résultat de cet exemple.](https://is.gd/nHfcEQ \"Exemple d'utilisation d'une macro\")\r\n\r\n[Que sont les spécificateurs ?]()\r\n\r\n### Que sont les spécificateurs ?\r\n\r\n### À quoi sert le mot-clé usize ?\r\n\r\nLe mot-clé `usize` permet de laisser le compilateur choisir la taille en mémoire d'un entier *non-signé* (selon l'architecture de la machine sur laquelle le programme sera exécuté).\r\n\r\nVoir aussi : [A quoi sert le mot-clé isize ?](#a-quoi-sert-le-mot-clé-isize)\r\n\r\n### A quoi sert le mot-clé isize ? \r\n\r\nLe mot-clé `isize` permet de laisser le compilateur choisir la taille en mémoire d'un entier *signé* (selon l'architecture de la machine sur laquelle le programme sera exécuté).\r\n\r\nVoir aussi : [A quoi sert le mot-clé usize ?](#À-quoi-sert-le-mot-clé-usize)\r\n\r\n### Existe-t-il des outils de build pour le langage Rust ?\r\n\r\nRust dispose d'un outil de développement multifonction nommé Cargo.\r\n\r\nCargo est en premier lieu un gestionnaire de paquets (qui vous permet donc de télécharger des modules Rust développés par d'autres programmeurs) mais vous épaule également dans la gestion, la construction de vos projets, la création de vos manifest, etc...\r\n\r\nUn groupe de Q/R a été créé sur cette FAQ présentant une liste non-exhaustive de commandes supportées par Cargo suivie d'un exemple d'utilisation (vous pourrez également retrouver des exemples dans le manuel officiel de l'outil (`$ man cargo`)) :\r\n\r\n\r\n*  [Comment créer un projet avec Cargo ?](#comment-créer-un-projet-avec-cargo) \r\n*  [Quel type de projet puis-je créer avec Cargo ?](#quel-type-de-projet-puis-je-créer-avec-cargo) \r\n*  [Comment compiler son projet ?](#comment-compiler-son-projet) \r\n*  [Peut-on générer de la documentation avec Cargo ?](#peut-on-générer-de-la-documentation-avec-cargo) \r\n*  [Où trouver de nouvelles bibliothèques ?](#où-trouver-de-nouvelles-bibliothèques) \r\n*  [Comment installer de nouvelles bibliothèques ?](#comment-installer-de-nouvelles-bibliothèques) \r\n*  [Comment publier sa bibliothèque faite-maison ?](#comment-publier-sa-bibliothèque-faite-maison) \r\n*  [Comment lancer des tests avec Cargo ?](#comment-lancer-des-tests-avec-cargo) \r\n*  [Comment créer ses benchmarks avec Cargo ?](#comment-créer-ses-benchmarks-avec-cargo) \r\n*  [Comment mettre à jour mes bibliothèques ?](#comment-mettre-à-jour-mes-bibliothèques) \r\n\r\n### Comment utiliser mes fonctions en dehors de mon module ?\r\n\r\nPour utiliser vos fonctions en dehors de votre `mod`ule, il vous faudra utiliser le mot-clé `pub`.\r\n\r\nVoir aussi :\r\n\r\n[A quoi sert le mot-clé pub ?](#a-quoi-sert-le-mot-clé-pub)\r\n\r\n[A quoi servent les mot-clés extern crate ?](#a-quoi-servent-les-mot-clés-extern-crate)\r\n\r\n### Comment comparer deux objets avec Rust ?\r\n\r\nPour comparer deux objets avec Rust, vous pouvez implémenter le `trait` `PartialEq` que vous pourrez ensuite utiliser avec `==` ou la méthode `eq`.\r\n\r\nExemple :\r\n\r\n```rust\r\nfn main() {\r\n    let foo = 0;\r\n    let bar = 0;\r\n    let baz = foo == bar; //true\r\n\r\n    let bazz = \"Hello world !\";\r\n    let bazzz = \"Hello world !\".to_string();\r\n    let bazzzz = bazz == &bazzz; // true\r\n    let bazzzz = bazz.eq(&bazzz); // équivalent de la ligne du dessus\r\n}\r\n```\r\n\r\nVoir aussi : [Comment comparer deux objets d'une structure personnalisée avec Rust ?](#comment-comparer-deux-objets-dune-structure-personnalisée-avec-rust)\r\n\r\n### Qu'est-ce que le shadowing ?\r\n\r\nLe shadowing consiste à faire abstraction des identificateurs qui pourraient être identiques à ceux se trouvant dans un scope (« champ ») plus petit, ou étranger à celui des autres identificateurs dans l'absolu.\r\n\r\nExemple :\r\n\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo: &str = \"Hello\";\r\n    {\r\n        let foo: &str = \"world!\";\r\n        println!(\"{}\", &foo);\r\n    }\r\n    println!(\"{}\", &foo);\r\n}\r\n```\r\n\r\nLa première déclaration de foo a été « éclipsée » par celle se trouvant dans le deuxième scope. Lorsque cette dernière a été détruite, la première déclaration de `foo` a été de nouveau opérationnelle.\r\n\r\nRésultat :\r\n\r\n```rust\r\nworld!\r\nHello\r\n```\r\n\r\n### Qu'est-ce que la destructuration ?\r\n\r\nAvec Rust, il est possible d'effectuer une « destructuration » sur certains types de données, mais qu'est-ce que cela signifie exactement ?\r\n\r\nGrâce au pattern matching, il est possible de créer, donc, des « modèles » pour isoler une partie de la structure et ainsi vérifier si notre entrée correspond à nos attentes.\r\n\r\nUne destrucuration peut se faire sur :\r\n\r\n* Les listes\r\n* Les tuples\r\n* Les énumérations\r\n* Les structures\r\n\r\nVoir aussi :\r\n\r\n\r\n*  [Comment effectuer une destructuration sur une liste ?](#comment-effectuer-une-destructuration-sur-une-liste) \r\n*  [Comment effectuer une destructuration sur une énumération ?](#comment-effectuer-une-destructuration-sur-une-énumération) \r\n*  [Comment effectuer une destructuration sur une structure ?](#comment-effectuer-une-destructuration-sur-une-structure) \r\n\r\n### Comment effectuer une destructuration sur une liste ?\r\n\r\nPour isoler une valeur contenu dans un tuple, il faut d'abord écrire son modèle pour savoir où le chercher.\r\n\r\nPar exemple, en assumant que nous cherchons une suite de chiffres dans un ordre croissant, il est simple de déterminer si cette suite est dans le bon ordre ou non.\r\n\r\n\r\n```rust\r\n    let foo = (\"one\", \"two\", \"three\");\r\n    let bar = (\"two\", \"one\", \"three\"); \r\n    \r\n    match bar {\r\n        (\"one\", x, \"three\") => {\r\n            if x == \"two\" {\r\n                println!(\"tout est en ordre !\");\r\n            }\r\n        }\r\n        _ => println!(\"on dirait qu'il y a un problème dans votre tuple...\"),\r\n    }\r\n```\r\n\r\nLorsque vous construisez un modèle de ce type, gardez bien en tête que la valeur la plus à gauche représentera toujours la première valeur du tuple, et celle plus à droite représentera toujours la dernière valeur du tuple.\r\n\r\nRien ne vous empêche donc de faire ceci :\r\n\r\n```rust\r\n    let foo = (\"one\", \"two\", \"three\");\r\n    let bar = (\"two\", \"one\", \"three\"); \r\n    \r\n    match foo {\r\n        (\"one\", x, y) => {\r\n            if (x, y) == (\"two\", \"three\") { // on surveille plusieurs valeurs\r\n                println!(\"tout est en ordre !\");\r\n            }\r\n        },\r\n        _ => println!(\"on dirait qu'il y a un problème dans votre tuple...\"),\r\n    }\r\n```\r\n\r\n### Comment effectuer une destructuration sur une énumération ?\r\n\r\nLe pattern matching vous donne la possibilité de « décortiquer » une énumération, vous permettant ainsi d'effectuer des tests complets.\r\n\r\nVoici un exemple :\r\n\r\n\r\n```rust\r\npub enum Enum {\r\n    One,\r\n    Two,\r\n    Three,\r\n    Four,\r\n}\r\n\r\nfn foo(arg: Enum) {\r\n    match arg {\r\n        Enum::One =>  println!(\"One\"),\r\n        Enum::Two => println!(\"Two\"),\r\n        Enum::Three => println!(\"Three\"),\r\n        Enum::Four => println!(\"Four\"),\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let (bar, baz, bazz, bazzz) = (Enum::One, Enum::Two, Enum::Three, Enum::Four);\r\n    \r\n    foo(bar);\r\n    foo(baz);\r\n    foo(bazz);\r\n    foo(bazzz);\r\n}\r\n```\r\n\r\n### Comment effectuer une destructuration sur une structure ?\r\n\r\nTout d'abord, la question que nous pourrions nous poser est : en quoi consiste la destructuration sur une structure ?\r\n\r\nL'idée est d'isoler, encore une fois, les propriétés qui nous intéressent.\r\n\r\n\r\n```rust\r\nstruct A {\r\n    x: String,\r\n    y: String,\r\n    z: String,\r\n}\r\n\r\nfn main() {\r\n    let foo = A {\r\n        x: \"Hello\".to_string(),\r\n        y: \" \".to_string(),\r\n        z: \"world!\".to_string(),\r\n    };\r\n    let A { x: a, y: b, z: c } = foo; // on décortique les attributs de notre structure\r\n    println!(\"{}{}{}\", a, b, c); // puis on les utilise dans de nouvelles variables\r\n}\r\n```\r\n\r\nVous souhaiteriez omettre un attribut ? Pas de problèmes !\r\n\r\n\r\n```rust\r\n    let foo = A {\r\n        x: \"Hello\".to_string(),\r\n        y: \" \".to_string(),\r\n        z: \"world!\".to_string(),\r\n    };\r\n    let A { x: a, y: b, .. } = foo; // on décortique les attributs de notre structure\r\n    println!(\"{}{}\", a, b); // puis on les utilise dans de nouvelles variables\r\n```\r\n\r\nVous pouvez également isoler ce style d'opération dans un scope plus petit (empêchant l'utilisation des variables temporaires en dehors de ce dernier) comme ceci :\r\n\r\n\r\n```rust\r\n    let foo = A {\r\n        x: \"Hello\".to_string(),\r\n        y: \" \".to_string(),\r\n        z: \"world!\".to_string(),\r\n    };\r\n    {\r\n        let A { x: a, y: b, z: c } = foo; //on décortique les attributs de notre structure\r\n        println!(\"{}{}{}\", a, b, c); //puis on les utilise dans de nouvelles variables\r\n    }\r\n    \r\n    // a,b et c ne pourront plus être utilisés à partir d'ici\r\n```\r\n\r\n### Comment comparer deux objets d'une structure personnalisée avec Rust ?\r\n\r\nLa bibliothèque standard de Rust propose un(e) `trait`/ interface nommé(e) `PartialEq` composée de deux fonctions :\r\n\r\n\r\n1.  `fn eq(&self, other : &instance_de_la_meme_structure)` * ;* \r\n2.  `fn ne(&self, other : &instance_de_la_meme_structure) ` *;* \r\n\r\nCi-dessous figure un exemple complet d'implémentation :\r\n\r\n\r\n```rust\r\nstruct Spartan<'a> {\r\n    sid: i32, \r\n    name: &'a str,\r\n}\r\n\r\nimpl<'a> PartialEq for Spartan<'a> {\r\n    fn eq(&self, other: &Spartan) -> bool {\r\n        self.sid == other.sid\r\n    }\r\n}\r\n\r\nimpl<'a> Spartan<'a> {\r\n    pub fn new(sid: i32, name: &str) -> Spartan {\r\n        Spartan {\r\n            sid: sid,\r\n            name: name,\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let (foo , bar) = (Spartan::new(117, \"John\"), Spartan::new(062, \"Jorge\"));\r\n    \r\n    if foo == bar { \r\n        println!(\"foo equals bar\"); \r\n    } else { \r\n        println!(\"foo not equals bar\"); \r\n    }\r\n}\r\n```\r\n\r\n### Je n'arrive pas à utiliser les macros importées par ma bibliothèque ! Pourquoi ?\r\n\r\nIl se pourrait que vous ayez omis d'utiliser une annotation : `#[macro_use]`\r\n\r\nCette dernière permet d'exporter toutes les macros qui doivent être publiques pour être utilisées à l'exterieur de la bibliothèque.\r\n\r\n\r\n```rust\r\n#[macro_use]\r\nextern crate votre_lib;\r\n\r\nfn main() {\r\n    votre_macro!();\r\n}\r\n```\r\n\r\nSi vous ne parvenez toujours pas à les utiliser, il est possible que vous ayez omis l'annotation `#[macro_export]` dans les modules comportant vos macros.\r\n\r\n\r\n```rust\r\n// dans le fichier lib.rs\r\n#[macro_use] // bien préciser que ce module utilise des macros\r\npub mod votre_conteneur {\r\n    #[macro_export]\r\n    macro_rules! foo\r\n    {\r\n        () => ();\r\n    }\r\n    #[macro_export]\r\n    macro_rules! bar\r\n    {\r\n        () => ();\r\n    }\r\n    #[macro_export]\r\n    macro_rules! baz\r\n    {\r\n        () => ();\r\n    }\r\n}\r\n```\r\n\r\nSi votre problème persiste, je vous invite à vous rendre sur les forums figurant dans la rubrique programmation pour obtenir de l'aide. Présentez clairement l'erreur que le compilateur vous renvoi dans votre post.\r\n\r\n### A quoi servent les mot-clés if let ?\r\n\r\nLa combinaison des deux mot-clés permet d'assigner, de manière concise, du contenu à une variable.\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo : Option<String> = Some(\"Hello world!\".to_string());\r\n    let mut bar : bool = false;\r\n    \r\n    if let Some(content) = foo { // si la variable foo contient quelque chose...\r\n        bar = true;\r\n    } else {\r\n        println!(\"foo's content is None\");\r\n    }\r\n}\r\n```\r\n\r\nC'est un moyen simple et efficace d'assigner du contenu sans passer par le pattern matching.\r\n\r\n### A quoi servent les mot-clés while let ?\r\n\r\nLa combinaison des deux mot-clés permet d'effectuer des tests de manière concise et ainsi nous éviter de passer par le pattern matching lorsque ça n'est pas nécessaire. (`while let` peuvent s'avérer très utiles lorsqu'il faut tester à chaque itération si le fichier contient toujours quelque chose)\r\n\r\n**[Exemple de la documentation officielle]**\r\n\r\n```rust\r\nlet mut v = vec![1, 3, 5, 7, 11];\r\n\r\nwhile let Some(x) = v.pop() {\r\n    println!(\"{}\", x);\r\n}\r\n```\r\n\r\n## Mécaniques et philosophies\r\n\r\n### Gestion de la mémoire\r\n\r\n#### Le développeur doit-il gérer la mémoire seul ?\r\n\r\nCette FAQ dispose de trois Q/R abordant trois concepts distincts (mais se complétant) gravitant autour de la gestion de la mémoire avec le langage Rust.\r\n\r\nPar souci de concision, les Q/R ci-dessous ne retiennent que l'essentiel de chaque concepts :\r\n\r\n\r\n1.  [Qu'est-ce que « l'ownership » ?](#quest-ce-que-lownership) \r\n2.  [Qu'est-ce que le concept de « borrowing » ?](#quest-ce-que-le-concept-de-borrowing) \r\n3.  [Qu'est-ce que le concept de « lifetime » ?](#quest-ce-que-le-concept-de-lifetime) \r\n\r\n#### Qu'est-ce que « l'ownership » ?\r\n\r\nSi l'on fait abstraction du contexte dans lequel est employé ce terme (en l'occurrence, la programmation), nous pourrions le traduire de cette façon : « propriété », « possession ».\r\n\r\nNous verrons un peu plus bas que le fonctionnement de ce mécanisme n'est pas si étranger au sens littéral du terme.\r\n\r\n**Introduction**\r\n\r\nRust est muni d'un système « d'appartenance » qui permet d'écarter les conflits les plus communs lorsqu'une ressource est utilisée à plusieurs endroits.\r\n\r\nBien que ce dernier soit très pratique, il demande d'avoir une certaine rigueur quant à la déclaration de nos ressources, sans quoi vous risqueriez de vous attirer les foudres du compilateur.\r\n\r\nPour cela, voici un exemple d'erreur typique lorsque l'on débute sans réellement connaître les tâches effectuées par le « ramasse-miette » :\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo: String = String::from(\"Hello world!\");\r\n    let bar: String = foo;\r\n    let baz: String = foo; //erreur la ressource a été « déplacée »\r\n}\r\n```\r\n\r\nRenvoyant une erreur de ce style :\r\n\r\n\r\n```rust\r\nerror: use of moved value: `foo`\r\n```\r\n\r\nC'est un exemple simple, mais qui (dans nos débuts) peut être une véritable plaie : on ne comprend pas d'où vient l'erreur - tout est syntaxiquement correct, mais le compilateur n'a pas l'air satisfait.\r\n\r\nC'est simple :\r\n\r\nLa variable foo étant un pointeur contenant l'adresse mémoire d'un objet String, il est courant de dire qu'il possède « l'ownership », il est le seul à pouvoir utiliser cette ressource.\r\n\r\nC'est en copiant les informations relatives à l'objet String (en « déplacant » ces informations dans une nouvelle variable, donc) que le *garbage* *collector* va faire son travail : détruire le pointeur *foo* pour attribuer « l'ownership » au nouveau pointeur de la ressource : *bar*.\r\n\r\nC'est lorsque la variable *baz* essaie de copier les informations de *foo* que l'erreur survient : *foo* a déjà été détruit par le *garbage* *collector*.\r\n\r\nPour remédier au problème, il aurait simplement suffit de \"copier\" *bar* de cette manière :\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo: String = \"Hello world!\".to_owned();\r\n    let bar: String = foo;\r\n    let baz: &String = &bar; // on récupère une référence\r\n}\r\n```\r\n\r\nTout est en règle, le compilateur ne râle plus, et si vous souhaitez afficher votre chaîne de caractères sur la sortie standard, rien ne vous en empêche !\r\n\r\nVous pouvez très bien écrire ceci :\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo = 42;\r\n    let bar = foo;\r\n    let baz = foo;\r\n}\r\n```\r\n\r\nCar les types primitifs tels que les `i8`, `i16`, `i32`, `i64`, `u8`, ... implémentent le trait `Copy`.\r\n\r\n**Quid des fonctions ?**\r\n\r\nLes fonctions obéissent aux mêmes règles que les pointeurs :\r\n\r\nLorsqu'une ressource est passée en paramètre par copie, la fonction « possède » la ressource, même lorsqu'elle a terminé de s'exécuter.\r\n\r\nExemple :\r\n\r\n\r\n```rust\r\nfn my_func(my_string: String) {\r\n    for letter in my_string.chars() {\r\n        println!(\"{}\", &letter);\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let foo: String = String::from(\"The cake is a lie!\");\r\n\r\n    my_func(foo);\r\n    let chars = foo.chars(); //error\r\n}\r\n```\r\n\r\nVous remarquerez donc ici que le pointeur **foo** a été détruit, la copie de la chaîne de caractères appartient désormais à la fonction.\r\n\r\nVoir aussi : [Qu'est-ce que le concept de « borrowing » ?](#quest-ce-que-le-concept-de-borrowing)\r\n\r\n#### Qu'est-ce que le concept de « borrowing » ?\r\n\r\nIl est courant de devoir partager une ressource entre plusieurs pointeurs pour effectuer diverses tâches.\r\n\r\nToutefois, plus une ressource est sollicitée, plus il y a de chance qu'elle soit *désynchronisée/invalidée* à un moment ou un autre. (c'est encore plus fréquent lorsque cette dernière est sollicitée par plusieurs fils d'exécution)\r\n\r\nRust remédie à ce problème grâce au « borrow checking », un système d'emprunts créant en quelque sorte des *mutex* chargés de limiter l'accès à une ressource et ainsi éviter les risques d'écritures simultanées.\r\n\r\nLe borrow checker fera respecter ces trois règles (que vous pouvez retrouver dans la documentation officielle) :\r\n\r\n\r\n1. Une (ou plusieurs) variable peut emprunter la ressource en lecture. (référence immuable)\r\n2. Un, et **seulement un**, pointeur peut disposer d'un accès en écriture sur la ressource.\r\n3. Vous ne pouvez pas accéder à la ressource en lecture et en écriture en même temps, exemple :\r\n\r\n\r\n```rust\r\nfn main()  {\r\n    let mut foo = 117;\r\n    let bar = &mut foo;\r\n    let baz = &foo; // erreur\r\n}\r\n```\r\n\r\nOu :\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let mut foo = 117;\r\n    let bar = &mut foo;\r\n    let baz = &mut foo; //erreur\r\n}\r\n```\r\n\r\n#### Qu'est-ce que le concept de « lifetime » ?\r\n\r\n**Introduction**\r\n\r\nComme tout langages (sauf exception que nous pourrions ignorer), Rust dispose d'un système de durée de vie.\r\n\r\nToutefois, il fait preuve d'une grande rigourosité quant à la destruction des ressources dynamiques et à « l'isolement » des ressources statiques après utilisation.\r\n\r\nVoici un exemple :\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let mut foo: String = \"Hello world!\".to_string(); // Le scope A commence ici\r\n    let bar: String = \"Goodbye, friend !\".to_string(); // Le scope B commence ici\r\n    foo = bar; // bar détruit, le scope B s'arrête là\r\n    println!(\"{}\", &bar);\r\n} // Le Scope A s'arrête ici\r\n```\r\n\r\nOn remarque à la suite de cet exemple que le concept de « scope » (contexte) n'est pas à l'échelle d'une fonction, mais bien des variables, incitant le développeur à déclarer et initialiser sa ressource uniquement lorsqu'il en a besoin.\r\n\r\n**Quid des références ? **\r\n\r\nLe concept de durée de vie dédiée aux références peut parfois dérouter, surtout lorsqu'il faut expliciter certains tags (représentants des durées de vie) au compilateur lorsqu'il nous l'impose et que l'on ne comprend pas bien pourquoi.\r\n\r\nLes références n'échappent pas à la règle, elles aussi ont des durées vie bien déterminées ; En règle générale, il n'est pas utile (voire interdit) au développeur d'expliciter les tags qui permettent au compilateur de « suivre » chaque référence durant son utilisation.\r\n\r\nCependant, lorsque l'une d'elles est passée en paramètre à une fonction, il peut parfois être nécessaire de tagger celles qui survivront au moins à l'exécution de la fonction. (ne serait-ce que par souci de clareté)\r\n\r\nVoici un exemple qui pourrait vous épauler : (attention à bien lire les commentaires)\r\n\r\n\r\n```rust\r\nfn foo(phrase: &str) { //aucune référence ne survit, donc pas la peine de l'annoter\r\n    println!(\"{}\", &phrase);\r\n}\r\n\r\nfn bar<'a>(phrase: &'a mut String, word: &str) -> &'a String { // une référence va survivre il faut maintenant savoir laquelle\r\n    phrase.push_str(word);\r\n    phrase\r\n} // La référence qui survivra sera donc « phrase », elle dispose donc de la durée de vie 'a.\r\n\r\nfn main() {\r\n    let mut baz: String = \"Hello \".to_string();\r\n    let word: &str   = \"world!\";\r\n    let bazz = bar(&mut baz, word); //ce que contient la varialbe bazz ne peut être accédé qu'en lecture\r\n    println!(\"{}\", &bazz); //nous affichons nos caractères sur la sortie standard\r\n}\r\n```\r\n\r\nEn revanche, ce n'est pas un cas commun, nous vous invitons donc à vous tourner vers la documentation officielle ou à expérimenter par vous-même.\r\n\r\n**Que faut-il retenir ?**\r\n\r\nPour faire simple, il faut retenir que :\r\n\r\n\r\n* Chaque variable créé un nouveau scope lors de sa déclaration ;\r\n* Toutes variables retrouvées dans le scope d'une autre verra sa durée de vie plus courte que cette dernière ;\r\n* A propos des références passées en paramètres, seules les références survivant au moins à la fin de l'exécution de la fonction devraient être annotées.\r\n\r\nVoir aussi :\r\n\r\n[Le Rustonomicon](https://doc.rust-lang.org/nomicon/lifetimes.html)\r\n\r\n[La section dédiée du livre](https://doc.rust-lang.org/book/lifetimes.html)\r\n\r\n#### Comment étendre un trait sur un autre trait ?\r\n\r\n## Outils de build\r\n\r\n### Comment créer un projet avec Cargo ?\r\n\r\nPour créer un nouveau projet avec Cargo, vérifiez d'abord qu'il est *installé* sur votre machine :\r\n\r\n`$ cargo -V`\r\n\r\nPuis :\r\n\r\n`$ cargo new nom_de_votre_repertoire`\r\n\r\nVous devriez voir se générer un dossier avec le nom assigné dans lequel se trouvera un répertoire nommé src et un manifest nommé *Cargo.toml*.\r\n\r\n### Quel type de projet puis-je créer avec Cargo ?\r\n\r\nLorsque vous lancez la commande de génération (telle qu'elle), votre projet est généré en mode « bibliothèque », et n'est donc pas destiné à être directement exécuté.\r\n\r\nSi vous souhaitez générer un projet en mode « exécutable », il suffit de le préciser dans la commande :\r\n\r\n`$ cargo new folder_name  --bin`\r\n\r\nPar défaut, le nom du répertoire racine sera également le nom de votre bibliothèque si elle devait être identifiée par d'autres utilisateurs dans le but de la télécharger. Si vous souhaitez lui attribuer un autre nom, vous pouvez également le spécifier dans la commande :\r\n\r\n`$ cargo new folder_name --name another_name  --bin`\r\n\r\nLe manifest sera modifié en conséquence.\r\n\r\n### Comment compiler son projet ?\r\n\r\nPour compiler votre projet, vous devez vous trouver à la racine de ce dernier.\r\n\r\nUne fois que c'est fait, il vous suffit de lancer la commande suivante :\r\n\r\n`$ cargo build`\r\n\r\n### Peut-on générer de la documentation avec Cargo ?\r\n\r\nBien sûr !\r\n\r\nIl suffit de lancer la commande $ cargo doc à la racine de votre projet.\r\n\r\nLa documentation se trouvera dans le dossier `./target/doc/…`\r\n\r\n**Où est l'index de mon site ?**\r\n\r\nIl se trouve dans le répertoire portant le nom de votre projet.\r\n\r\n### Où trouver de nouvelles bibliothèques ?\r\n\r\nVous pouvez trouver d'autres bibliothèques sur le [site officiel](https://crates.io/crates) de Cargo.\r\n\r\nVoir aussi : [Comment installer de nouvelles bibliothèques ?](#comment-installer-de-nouvelles-bibliothèques)\r\n\r\n### Comment installer de nouvelles bibliothèques ?\r\n\r\nIl y a deux manières de faire :\r\n\r\n\r\n1. Les télécharger à partir de [crate.io](https://crates.io/crates) ;\r\n2. Les télécharger directement à partir de leur dépôt github.\r\n\r\nC'est selon vos préférences. (et surtout selon la disponibilité de la ressource)\r\n\r\nDonc pour la première façon, rien de plus simple :\r\n\r\n\r\n* Vous cherchez la bibliothèque que vous désirez sur le site ;\r\n* Vous renseignez son nom dans votre manifest ;\r\n* Compilez ;\r\n* C'est prêt !\r\n\r\nPour la seconde :\r\n\r\n\r\n* Cherchez le dépôt github de la bibliothèque désirée ;\r\n* Notez le nom que porte cette bibliothèque dans son manifest ;\r\n* Puis ajoutez cette ligne dans vos dépendences : `lib_name = {git = \"url du dépôt\" }` ;\r\n* Compilez ;\r\n* C'est prêt !\r\n\r\n### Comment publier sa bibliothèque faite-maison ?\r\n\r\nLes procédures étant très bien expliquées sur le site de [crates.io](http://crates.io/), nous vous invitons à vous rendre dans la [section dédiée](http://doc.crates.io/crates-io.html).\r\n\r\nSi vous souhaitez malgré tout lire les procédures sur la FAQ, en voici une traduction :\r\n\r\nUne fois que vous avez une bibliothèque que vous souhaiteriez partager avec le reste du monde, il est temps de la publier sur [crates.io](http://crates.io/) !\r\n\r\nLa publication d'un paquet est effective lorsqu'il est uploadé pour être hébergé par [crates.io](http://crates.io/).\r\n\r\n**Attention**:\r\n\r\n>Réfléchissez avant de publier votre paquet, car sa publication est permanente.\r\n>La version publiée ne pourra jamais être écrasée par une autre, et le code ne pourra être supprimé.\r\n>En revanche, le nombre de versions publiées n'est pas limité.\r\n\r\n**Avant votre première publication**\r\n\r\nPremièrement, vous allez avoir besoin d'un compte sur crates.io pour recevoir un « token » (jeton) provenant de l'API. Pour faire ceci, visitez la page d'accueil et enregistrez-vous via votre compte Github. Ensuite, rendez-vous dans vos options de compte, et lancez la commande $ cargo login suivi de votre token.\r\n\r\n\r\n```bash\r\n$ cargo login abcdefghijklmnopqrstuvwxyz012345\r\n```\r\n\r\nCette commande va informer Cargo que vous détenez un token provenant de l'API du site. (il est enregistré dans le chemin suivant : ~/.cargo/config.)\r\n\r\nCe token doit rester secret et ne devrait être partagé avec personne. Si vous le perdez d'une quelconque manière, régénérez-le immédiatement.\r\n\r\n**Avant la publication du paquet**\r\n\r\nGardez en tête que le nom de chaque paquet est alloué en respectant la règle du « premier arrivé, premier servi ». Une fois que vous avez choisi un nom, il ne pourra plus être utilisé pour un autre paquet.\r\n\r\n**Empaqueter le projet**\r\n\r\nLa prochaine étape consiste à empaqueter votre projet de manière à être intelligible pour crates.io. Pour remédier à cela, nous allons utiliser la commande cargo package. Votre projet sera donc empaqueter sous la format *.crate et se trouvera dans le répertoire target/package/.\r\n\r\n\r\n```bash\r\n$ cargo package\r\n```\r\n\r\nEn plus de cela, la commande package est capable de vérifier l'intégrité de votre projet en dépaquetant votre *.crate et le recompiler. Si la phase de vérification se passe sans problème, rien ne devrait être affiché dans votre terminal.\r\n\r\nToutefois, si vous souhaitez désactiver cette vérification avant l'envoi, il vous suffit d'ajouter le flag --no-verify.\r\n\r\nCargo va ignorer automatiquement tous les fichiers ignorés par votre système de versionning, mais si vous voulez spécifier un type de fichiers en particulier, vous pouvez utiliser le mot-clé exclude dans votre manifest :\r\n\r\n[Exemple tiré de la [documentation officielle](http://doc.crates.io/crates-io.html) de l'outil]\r\n\r\n\r\n```text\r\n[package]\r\n# ...\r\nexclude = [\r\n    \"public/assets/*\",\r\n    \"videos/*\",\r\n]\r\n```\r\n\r\nLa syntaxe de chaque élément dans ce tableau est ce que glob accepte. Si vous souhaitez créer une whitelist au lieu d'une blacklist, vous pouvez utiliser le mot-clé include.\r\n\r\n[Exemple tiré de la [documentation officielle](http://doc.crates.io/crates-io.html) de l'outil]\r\n\r\n\r\n```text\r\n[package]\r\n# ...\r\ninclude = [\r\n    \"**/*.rs\",\r\n    \"Cargo.toml\",\r\n]\r\n```\r\n\r\nMaintenant que nous avons un fichier *.crate prêt à y aller, il peut être uploadé sur crates.io grâce à la commande cargo publish. C'est tout, vous venez de publier votre premier paquet !\r\n\r\n\r\n```bash\r\n$ cargo publish\r\n```\r\n\r\nSi vous venez à oublier de lancer la commande `cargo package`, `cargo publish` le fera à votre place et vérifiera l'intégrité de votre projet avant de lancer l'étape de publication.\r\n\r\n>Il se pourrait que la commande publish vous refuse votre première publication. Pas de panique, ce n'est pas très grave.\r\n>Votre paquet, pour être différencié des autres, doit compter un certain nombre de métadonnées pour renseigner vos futurs utilisateurs sur les tenants et aboutissants de votre projet, comme la licence par exemple.\r\n>Pour ceci, vous pouvez vous rendre [ici](http://doc.crates.io/manifest.html#package-metadata), et ainsi visionner un exemple simple des métadonnées à renseigner.\r\n>Relancez votre procédure `cargo publish`, vous ne devriez plus avoir de problème.\r\n\r\n\r\nUn problème pour accéder à l'exemple ? En voici un autre :\r\n\r\n\r\n```toml\r\n[package]\r\nname = \"verbose_bird\"\r\nversion = \"0.3.2\"\r\nauthors = [\"Songbird0 <chaacygg@gmail.com>\"]\r\ndescription = \"An awesome homemade loggers pack.\"\r\ndocumentation = \"https://github.com/Songbird0/Verbose_Bird/blob/master/src/README.md\"\r\nhomepage = \"https://github.com/Songbird0/Verbose_Bird\"\r\nrepository = \"https://github.com/Songbird0/Verbose_Bird\"\r\n\r\nreadme = \"README.md\"\r\n\r\nkeywords = [\"Rust\", \"log\", \"loggers\", \"pack\"]\r\n\r\nlicense = \"GPL-3.0\"\r\n\r\nlicense-file = \"LICENSE.md\"\r\n\r\n[dependencies]\r\n```\r\n\r\n**Attention**:\r\n\r\n>Il se peut que vous rencontriez également des problèmes avec l'entrée « license = ... » vous informant que le nom de licence entré n'est pas valide.\r\n>Pour régler le souci rendez-vous sur [opensource.org](https://opensource.org/licenses/alphabetical) et visionner les noms raccourcis entre parenthèses de chaque licence.\r\n\r\n\r\n### Comment lancer des tests avec Cargo ?\r\n\r\nPour lancer un test avec cargo, il vous faudra utiliser l'attribut `#[test]` et, évidemment, la commande `$ cargo test`.\r\n\r\nVoici un exemple simple de tests :\r\n\r\n\r\n```rust\r\n#[cfg(test)]\r\nmod oo_tests {\r\n    struct Alice;\r\n    use loggers_pack::oop::Logger;\r\n    impl Logger for Alice{/*...*/}\r\n\r\n    #[test]\r\n    fn pack_logger_oop_info() {\r\n        Alice::info(\"@Alice\", \"Hello, I'm Alice \", \"Peterson !\");\r\n    }\r\n\r\n    #[test]\r\n    fn pack_logger_oop_wan() {\r\n        Alice::warn(\"@Alice\", \"Hello, I'm Alice \", \"Peterson !\");\r\n    }\r\n\r\n    #[test]\r\n    fn pack_logger_oop_error() {\r\n        Alice::error(\"@Alice\", \"Hello, I'm Alice \", \"Peterson !\");\r\n    }\r\n\r\n    #[test]\r\n    fn pack_logger_oop_success() {\r\n        Alice::success(\"@Alice\", \"Hello, I'm Alice \", \"Peterson !\");\r\n    }\r\n}\r\n```\r\n\r\nChaque fonction annotée par l'attribut `#[test]` sera compilée durant la phase de test.\r\n\r\n**Attention**:\r\n\r\n>La version **1.9.0** de Rust comporte un bogue au niveau des tests. Dans cette version, toutes les fonctions annotées `#[test]` doivent être encapsulées dans un module. Ce n'est bien entendu plus le cas en **1.12.1**.\r\n>Si vous rencontrez ce problème, nous vous conseillons de mettre à jour votre compilateur.\r\n\r\n### Comment mettre à jour mes bibliothèques ?\r\n\r\nPour mettre à jour vos dépendences, il vous suffit d'utiliser la commande : `$ cargo update`.\r\n\r\nVous pouvez également préciser quelle bibliothèque mettre à jour séparément en utilisation l'option `$ cargo update --precise nom_dep`\r\n\r\n### Comment créer ses benchmarks avec Cargo ?\r\n\r\nPour créer nos benchmark, donc, nous allons utiliser le paquet [bencher](https://crates.io/crates/bencher).\r\n\r\nCe module était premièrement connu sous le nom test puis bencher qui sera porté en tant que dépendance externe pour éviter les effets de bord dans les versions stables du langage.\r\n\r\n\r\n```toml\r\n[package]\r\nname = \"awesome_tests\"\r\nversion = \"0.1.0\"\r\nauthors = [\"Songbird0 <chaacygg@gmail.com>\"]\r\n\r\n[dependencies]\r\n\r\nbencher = \"0.1.1\"\r\n\r\n[[bench]]\r\nname = \"my_bench\"\r\nharness = false\r\n```\r\n\r\nVoici un exemple basique de benchmark pour une fonction qui recherche le mot le plus court d'une phrase :\r\n\r\n\r\n```rust\r\n#[macro_use]\r\nextern crate bencher;\r\nuse bencher::Bencher;\r\n\r\nfn find_short(s: &str) -> usize {\r\n    let splitting: Vec<&str> = s.split_whitespace().collect();\r\n    let mut shortest_len: usize = 0;\r\n    let mut i: usize = 0;\r\n\r\n    while i < splitting.len() {\r\n        if i == 0 {\r\n            shortest_len = splitting[0].len();\r\n        } else {\r\n            if splitting[i].len() < shortest_len {\r\n                shortest_len = splitting[i].len();\r\n            }\r\n        }\r\n        i += 1;\r\n    }\r\n    shortest_len\r\n}\r\n\r\nfn bench_find_short(b: &mut Bencher) {\r\n    b.iter(|| find_short(\"Hello darkness my old friend\"));\r\n}\r\n\r\nbenchmark_group!(my_bench, bench_find_short);\r\nbenchmark_main!(my_bench);\r\n```\r\n\r\n### A quoi sert benchmark_group! ?\r\n\r\nLa macro `bencmark_group!` sert a créer des « groupes » de fonctions à mesurer lors de l'exécution de la commande `cargo bench`.\r\n\r\n### A quoi sert benchmark_main! ?\r\n\r\nLa macro `benchmark_main!` permet de créer une fonction main contenant toutes les fonctions à « benmarker ».\r\n\r\n## Gestion des erreurs\r\n\r\n### Comment s'effectue la gestion des erreurs avec Rust ?\r\n\r\nTout comme les langages impératifs classiques (e.g. C), Rust ne gère pas les erreurs grâce à un système « d'exceptions » comme nous pourrions retrouver dans des langages plus orientés objets, mais grâce au contenu renvoyé en sortie de fonction.\r\n\r\nPlusieurs fonctions (et macros) sont d'ailleurs dédiées à cette gestion (e.g. `panic!`, `unwrap()` (et ses dérivés), `and_then()`) permettant ainsi de rattraper (d'une manière plus ou moins fine) la situation lorsque les conditions imposées par vos soins ne sont pas respectées.\r\n\r\nCette section regroupe donc un certain nombre de Q/R qui pourrait vous aider à mieux cerner ce système de gestion :\r\n\r\n\r\n*  [A quoi sert la macro panic! ?](#a-quoi-sert-la-macro-panic) \r\n*  [A quoi sert la méthode unwrap ?](#a-quoi-sert-la-méthode-unwrap) \r\n*  [A quoi sert la méthode unwrap_or ?](#a-quoi-sert-la-méthode-unwrap_or) \r\n*  [A quoi sert la méthode unwrap_or_else ?](#a-quoi-sert-la-méthode-unwrap_or_else) \r\n* [A quoi sert la méthode map ?](#a-quoi-sert-la-méthode-map) ![](./images/WIP.gif)\r\n*  [A quoi sert la méthode and_then ?](#a-quoi-sert-la-méthode-and_then) \r\n* [A quoi sert la macro try! ?](#a-quoi-sert-la-macro-try) ![](./images/WIP.gif)\r\n*  [Comment utiliser la macro assert! ?](#comment-utiliser-la-macro-assert) \r\n*  [Comment utiliser la macro assert_eq! ?](#comment-utiliser-la-macro-assert_eq) \r\n*  [Comment utiliser la macro debug_assert! ?](#comment-utiliser-la-macro-debug_assert) \r\n* [Qu'est-ce que l'énumération Option<T> ?](#quest-ce-que-lénumération-option) ![](./images/WIP.gif)\r\n* [Comment utiliser l'énumération Option<T> ?](#comment-utiliser-lénumération-option) ![](./images/WIP.gif)\r\n* [Qu'est-ce que l'énumération Result<T, E> ?](#quest-ce-que-lénumération-result) ![](./images/WIP.gif)\r\n* [Comment utiliser l'énumération Result<T, E> ?](#comment-utiliser-lénumération-result) ![](./images/WIP.gif)\r\n\r\n### Comment créer un type spécifique d'exceptions ?\r\n\r\nIl n'est pas possible de créer de créer une structure censée représenter un type d'erreur, comme nous pourrions le faire en Java ; Rust ne gère pas les potentielles de cette manière.\r\n\r\nVoir aussi :\r\n\r\n[Comment s'effectue la gestion des erreurs avec Rust ?](#comment-seffectue-la-gestion-des-erreurs-avec-rust)\r\n\r\n### Est-il possible de créer des assertions ?\r\n\r\nOui, bien entendu.\r\n\r\nIl existe trois assertions différentes en Rust (toutes encapsulées par une macro) :\r\n\r\n\r\n1. [assert!](https://doc.rust-lang.org/std/macro.assert!.html \"Ouvrir un nouvel onglet\")!;\r\n2. [assert_eq!](https://doc.rust-lang.org/std/macro.assert_eq!.html \"Ouvrir un nouvel onglet\")!;\r\n3. [debug_assert!](https://doc.rust-lang.org/std/macro.debug_assert!.html \"Ouvrir un nouvel onglet\")!.\r\n\r\nVoir aussi :\r\n\r\n\r\n*  [Comment utiliser la macro assert! ?](#comment-utiliser-la-macro-assert) \r\n*  [Comment utiliser la macro assert_eq! ?](#comment-utiliser-la-macro-assert_eq) \r\n*  [Comment utiliser la macro debug_assert! ?](#comment-utiliser-la-macro-debug_assert) \r\n\r\n### A quoi sert la macro panic! ?\r\n\r\nLa macro `panic!` pourrait être comparée aux exceptions [RuntimeException](http://docs.oracle.com/javase/7/docs/api/java/lang/RuntimeException.html \"Ouvrir un nouvel onglet\") en Java qui sont, à coup sûr, des erreurs bloquantes.\r\n\r\n\r\n```java\r\npublic class MyClass \r\n{\r\n        public static void main(String[] args) \r\n        {\r\n            throw new RuntimeException(\"Error !\");\r\n            System.out.println(\"Dead code.\");\r\n        }\r\n}\r\n```\r\n\r\nElle est donc la macro la plus bas niveau que l'on peut retrouver parmi les macros et/ou fonctions proposées par la bibliothèque standard; Elle ne prend rien en compte mis à part l'arrêt du programme et l'affichage de la trace de la pile.\r\n\r\n\r\n```rust\r\nfn main() {\r\n    panic!(\"Error !\");\r\n    println!(\"Dead code\");\r\n}\r\n```\r\n\r\nVoir aussi :\r\n\r\n\r\n* [A quoi sert la méthode unwrap() ?](#a-quoi-sert-la-méthode-unwrap)\r\n* [A quoi sert la méthode and_then ?](#a-quoi-sert-la-méthode-and_then)\r\n* [A quoi sert la macro try! ?](#a-quoi-sert-la-macro-try)\r\n\r\n### A quoi sert la méthode unwrap ?\r\n\r\nLa méthode `unwrap()` permet de récupérer la donnée contenue par son wrapper et de faire abstraction des « cas d'analyse » avant de la délivrer.\r\n\r\nAutrement dit, la méthode `unwrap()` délivre la donnée enveloppée si l'instance vaut `Some`() ou `Ok`(), sinon plante le programme si elle vaut `None` ou `Err`().\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo: Option<String> = Some(\"ça passe!\".to_string());\r\n    let bar: Option<String> = None;\r\n    let baz: Result<String, String> = Ok(\"ça passe!\".to_string());\r\n    let bing: Result<String, String> = Err(\"ça casse!\".to_string());\r\n    \r\n    println!(\"{} {} {} {}\", foo.unwrap(), bar.unwrap(), baz.unwrap(), bing.unwrap());\r\n}\r\n```\r\n\r\nVoir aussi :\r\n\r\n\r\n* [Tester l'exemple](https://is.gd/GTSlPy \"Ouvrir un nouvel onglet\") (Pensez à isoler les appels de la méthode si vous ne souhaitez pas faire planter votre programme.)\r\n* [Qu'est-ce que l'énumération Option<T> ?](#quest-ce-que-lénumération-option)\r\n* [Qu'est-ce que l'énumération Result<T, E> ?](#quest-ce-que-lénumération-result)\r\n\r\n### A quoi sert la méthode unwrap_or ?\r\n\r\nLa méthode `unwrap_or()` fonctionne exactement comme la méthode originelleunwrap mais permet d'éviter de faire « paniquer » le programme, et donc l'arrêt de l'exécution, en nous permettant de passer une valeur par défaut à renvoyer si le wrapper visé ne contient rien initialement.\r\n\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo: Option<String> = Some(\"ça passe!\".to_string());\r\n    let bar: Option<String> = None;\r\n    let baz: Result<String, String> = Ok(\"ça passe!\".to_string());\r\n    let bing: Result<String, String> = Err(\"ça casse!\".to_string());\r\n    \r\n    println!(\"{} {} {} {}\", foo.unwrap(), bar.unwrap_or(String::from(\"ça passe, mais de justesse !\")), baz.unwrap(), bing.unwrap_or(String::from(\"On évite de faire planter le programme.\")));\r\n    /* \r\n        Pensez à isoler les appels de la méthode si vous ne souhaitez pas faire planter votre programme.\r\n    */\r\n}\r\n```\r\n\r\nVoir aussi :\r\n\r\n[Tester l'exemple](https://is.gd/gwInIj \"Ouvrir un nouvel onglet\")\r\n\r\n### A quoi sert la méthode unwrap_or_else ?\r\n\r\nLa méthode `unwrap_or_else` fonctionne exactement comme `unwrap_or`, mais proposera de passer en paramètre une fonction à la place d'une simple donnée.\r\n\r\n\r\n```rust\r\nfn bang(arg: String) -> String {\r\n    return \"Chef, on a eu une erreur: \".to_string() + arg.as_str();\r\n}\r\n\r\nfn main() {\r\n    let foo: Option<String> = Some(\"ça passe!\".to_string());\r\n    let bar: Option<String> = None;\r\n    let baz: Result<String, String> = Ok(\"ça passe!\".to_string());\r\n    let bing: Result<String, String> = Err(\"ça casse!\".to_string());\r\n    \r\n    bar.unwrap_or_else(|| { return \"On évite la casse !\".to_string(); });\r\n    println!(\"{}\", bing.unwrap_or_else(bang));\r\n}\r\n```\r\n\r\n**Note **: le paramètre que reçoit la fonction `bang` n'est ni plus ni moins ce que vous avez renseigné dans le contructeur de l'instance `Err`() `bing`. Gardez ceci en tête lorsque vous souhaiterez effectuer des opérations sur ce paramètre dans le corps de votre fonction.\r\n\r\n### A quoi sert la méthode map ?\r\n\r\n### A quoi sert la méthode and_then ?\r\n\r\nLa méthode and_then() permet d'effectuer des opérations sur la structure qui l'implémente, puis renvoie une nouvelle instance de cette dernière.\r\n\r\n\r\n```rust\r\nfn concat(arg: &str) -> Option<String> {\r\n    Some(arg.to_string() + \"world!\")\r\n}\r\n\r\nfn main() {\r\n    let foo = Some(\"Hello \");\r\n    println!(\"{}\", foo.and_then(concat).unwrap());\r\n}\r\n```\r\n\r\nActuellement, les structures qui implémentent la méthode `and_then()` sont :\r\n\r\n\r\n* `Option<T>`;\r\n* `Result<T, E>`;\r\n\r\nVoir aussi :\r\n\r\n\r\n* [A quoi sert la méthode unwrap() ?](#a-quoi-sert-la-méthode-unwrap)\r\n* [Qu'est-ce que l'énumération Result<T, E> ?](#quest-ce-que-lénumération-result)\r\n* [Qu'est-ce que l'énumération Option<T> ?](#quest-ce-que-lénumération-option)\r\n\r\n### A quoi sert la macro try! ?\r\n\r\n### Comment utiliser la macro assert! ?\r\n\r\nLa macro `assert!` capture deux types « d'expressions » différents :\r\n\r\nLes expressions à proprement parler, qui pourraient être illustrées par les exemples suivants :\r\n\r\n\r\n```rust\r\n2 * 2, if … else …, foo() ;\r\n```\r\n\r\nLes « tokens tree » qui pourraient être illustrés par n'importe quoi d'autres figurant dans la syntaxe du langage. (puisque, dans l'absolu, le compilateur représente tout ce qui est rédigé dans les fichiers sources grâce à une nomenclature bien à lui)\r\n\r\nDonc si nous récupérons le code source raccourci de la documentation, cela donne ceci :\r\n\r\n\r\n```rust\r\nmacro_rules! assert {\r\n    ( $ cond : expr ) => { ... };\r\n    (\r\n$ cond : expr , $ ( $ arg : tt ) + ) => { ... };\r\n}\r\n```\r\n\r\nSi certaines choses vous échappent, n'hésitez pas à vous rendre sur les liens proposés en bas de cette Q/R.\r\n\r\n#### A quoi sert le second paramètre ?\r\n\r\nLe second peut, par exemple, accueillir un message personnalisé pour la macro panic! facilitant ainsi le débogage.\r\n\r\n\r\n```rust\r\nfn foo(arg: Option<String>) {\r\n    let bar: String = String::from(\"Hello world!\");\r\n    let mut some: Option<String> = None;\r\n    assert!(!arg.is_none(), \"Arg is None\");\r\n    assert!(arg.unwrap().eq(&bar), \"arg n'est pas égal à bar\");\r\n}\r\n\r\nfn main() {\r\n    foo(Some(\"Ok\".to_string()));\r\n    foo(None);\r\n}\r\n```\r\n\r\nVoir aussi :\r\n\r\n\r\n* [Visionner le résultat de l'exemple](https://is.gd/wsqrbp \"Ouvrir un nouvel onglet\") (requiert une connexion internet)\r\n* [Comment utiliser une macro ?](#comment-utiliser-une-macro)\r\n\r\n### Comment utiliser la macro assert_eq! ?\r\n\r\n `assert_eq!` est un dérivé de la macro `assert!` et permet de tester directement l'égalité de deux objetsLe terme « objet » est ici utilisé pour désigner toutes les entités pouvant être comparées à d'autres. (cela ne concerne donc pas que les instances des structures).\r\n\r\nBien entendu, elle hérite également du message personnalisé pour la macro `panic!`.\r\n\r\n\r\n```rust\r\nfn foo(arg: Option<String>) {\r\n    let bar: String = String::from(\"Hello world!\");\r\n    let mut some: Option<String> = None;\r\n    assert!(!arg.is_none(), \"Arg is None\");\r\n    assert_eq!(arg.unwrap(), bar, \"arg n'est pas égal à bar\");\r\n}\r\n\r\nfn main() {\r\n    foo(Some(\"Ok\".to_string()));\r\n    foo(None);\r\n}\r\n```\r\n\r\nVoir aussi :\r\n\r\n\r\n*  [Visionner le résultat de l'exemple (requiert une connexion internet)](https://is.gd/en8FRZ \"Ouvrir un nouvel onglet\") \r\n*  [Comment utiliser une macro ?](#comment-utiliser-une-macro) \r\n\r\n### Comment utiliser la macro debug_assert! ?\r\n\r\n#### Où puis-je l'utiliser ?\r\n\r\n`debug_assert!` ainsi que ses dérivés (`debug_assert_eq!`) ne sont compilées que lorsque le code source est compilé en mode débug. (mode par défaut de **rustc**)\r\n\r\nVous ne devez pas compter sur ces assertions pour contrôler le flux de votre programme en production, assurez-vous toujours d'avoir une assertion compilée en mode release.\r\n\r\n#### Comment l'utiliser ?\r\n\r\nEn dehors du contexte dans lequel ces assertions doivent être déclarées, la manière dont elles sont utilisées ne changent pas.\r\n\r\nVoir aussi :\r\n\r\n\r\n*  [Comment utiliser la macro assert! ?](#comment-utiliser-la-macro-assert) \r\n*  [Comment utiliser la macro assert_eq! ?](#comment-utiliser-la-macro-assert_eq) \r\n*  [Comment utiliser une macro ?](#comment-utiliser-une-macro) \r\n\r\n### Qu'est-ce que l'énumération Result<T, E> ?\r\n\r\n`Result<T, E>` est une énumération contenant deux constructeurs :\r\n\r\n\r\n1. `Ok(T)`,\r\n2. `Err(E)`.\r\n\r\nElle permet de gérer convenablement les cas où l'entrée `T` ne correspond pas à nos attentes et ainsi le communiquer au reste du programme pour que l'incident soit rattrapé plus loin si besoin.\r\n\r\nVoir aussi : [Comment utiliser l'énumération `Result<T, E>` ?](#comment-utiliser-lénumération-result)\r\n\r\n### Comment utiliser l'énumération Result<T, E> ?\r\n\r\nL'utilisation de cette énumération requiert quelques notions quant à la gestion des erreurs avec Rust; Ce dernier ne permettant pas l'utilisation des exceptions, cette structure vous permettra de conserver l'entrée si elle correspond à vos attentes, ou le message d'erreur si quelque chose ne s'est pas passé correctement.\r\n\r\nVoici un exemple simple de gestion d'erreur :\r\n\r\n\r\n\r\n```rust\r\nfn foo<'a, 'b>(arg: Option<&'a str>) -> Result<String, &'b str> {\r\n    if let Some(content) = arg {\r\n        let unwrapping = arg.unwrap();\r\n        return Ok(unwrapping.to_string());\r\n    }\r\n\r\n    Err(\"L'argument ne contient rien.\")\r\n}\r\n\r\nfn main() {\r\n    match foo(None) {\r\n        Ok(content) => println!(\"Ok: {}\", content),\r\n        Err(err) => println!(\"Error: {}\", err.to_string()),\r\n    }\r\n}\r\n```\r\n\r\nVoir aussi :\r\n\r\n[A quoi sert la macro `try!` ?](#a-quoi-sert-la-macro-try)\r\n\r\n[A quoi sert la macro `panic!` ?](#a-quoi-sert-la-macro-panic)\r\n\r\n[Le résultat de cet exemple](https://is.gd/kof5ew \"Ouvrir un nouvel onglet\")\r\n\r\n### Qu'est-ce que l'énumération Option<T> ?\r\n\r\nOption est une énumération contenant deux constructeurs différents : `Some(T)` et `None`.\r\n\r\nOption est en quelque sorte un wrapper, conteneur permettant de vérifier l'intégrité des données contenues.\r\n\r\n### Comment utiliser l'énumération Option<T> ?\r\n\r\nPour utiliser les variantes de l'énumération, il faut savoir à quoi elles correspondent.\r\n\r\n\r\n* `Some(T)` représente un binding valide;\r\n* `None` représente un binding invalide.\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo: Option<String> = Some(String::from(\"Binding valide\"));\r\n    let bar: Option<String> = None; //binding invalide, ne contient rien\r\n}\r\n```\r\n\r\n## Meta-données\r\n\r\n## I/O\r\n\r\n## Antisèches Rust\r\n\r\n## Trucs & astuces\r\n\r\n### Que puis-je trouver dans cette section ?\r\n\r\nVous pourrez retrouver des « trucs et astuces » pour résoudre un problème plus ou moins commun et complexe.\r\n\r\nCe qui signifie que si vous souhaitez ne serait-ce que conserver des notes quant aux manipulations requises pour se sortir d'un mauvais pas, d'un contexte qui prête à confusion, vos contributions sont les bienvenues dans cette section. :)\r\n\r\n### Comment récupérer le vecteur d'une instance de la structure Chars ?\r\n\r\nIl est parfois nécessaire d'éclater une chaîne pour traiter ses caractères au cas par cas ; Jusqu'ici, Rust vous propose une méthode plutôt intuitive nommée `chars()`.\r\n\r\nAprès avoir éclatée la chaîne, vous souhaiteriez peut-être itérer plusieurs fois sur celle-ci, sans succès.\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo = String::from(\"Hello\");\r\n    let bar = foo.chars();\r\n    \r\n    for letter in bar {}\r\n    for letter in bar {}    \r\n}\r\n```\r\n\r\nErreur :\r\n\r\n\r\n```text\r\nerror[E0382]: use of moved value: `bar`\r\n --> <anon>:7:19\r\n  |\r\n6 |     for letter in bar {}\r\n  |                   --- value moved here\r\n7 |     for letter in bar {}    \r\n  |                   ^^^ value used here after move\r\n  |\r\n```\r\n\r\nLa solution pourrait être la suivante :\r\n\r\n\r\n\r\n```rust\r\n    let foo = String::from(\"Hello\");\r\n    let bar = foo.chars();\r\n    \r\n    for letter in &bar {}\r\n    for letter in &bar {}\r\n```\r\n\r\n\r\n\r\n```text\r\nerror[E0277]: the trait bound `&std::str::Chars<'_>: std::iter::Iterator` is not satisfied\r\n --> <anon>:6:5\r\n  |\r\n6 |     for letter in &bar {}\r\n  |     ^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: `&std::str::Chars<'_>` is not an iterator; maybe try calling `.iter()` or a similar method\r\n  = note: required by `std::iter::IntoIterator::into_iter`\r\n```\r\n\r\nMais récoltez encore une erreur…\r\n\r\nLe compilateur vous invite alors à essayer d'appeler la méthode `.iter()` qui est censée être implémentée par toutes les structures implémentant l'interface `Iterator`; Ce n'est malheureusement pas le cas pour la structure `Chars`.\r\n\r\n#### Que faire alors ?\r\n\r\nLa méthode remplaçant `.iter()` est `.collect()`; Cette dernière vous permet de récupérer un vecteur contenant toutes les entitésEn l'occurrence, ici, les caractères. de l'ancien itérateur.\r\n\r\nVous pouvez désormais accéder à votre ressource par référence et ainsi la parcourir autant de fois que vous le souhaitez.\r\n\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let foo = String::from(\"Hello\");\r\n    let bar = foo.chars();\r\n    let baz: Vec<char> = bar.collect();\r\n    for letter in &baz {}\r\n    for letter in &baz {}    \r\n}\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}